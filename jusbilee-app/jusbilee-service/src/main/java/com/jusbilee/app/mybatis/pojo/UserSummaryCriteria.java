package com.jusbilee.app.mybatis.pojo;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class UserSummaryCriteria {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    protected List<Criteria> oredCriteria;

    private Integer limit;

    private Integer offset;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public UserSummaryCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }

    public Integer getLimit() {
        return limit;
    }

    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    public Integer getOffset() {
        return offset;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserIdEqualTo(Long value) {
            addCriterion("user_id =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotEqualTo(Long value) {
            addCriterion("user_id <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThan(Long value) {
            addCriterion("user_id >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Long value) {
            addCriterion("user_id >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThan(Long value) {
            addCriterion("user_id <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Long value) {
            addCriterion("user_id <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdIn(List<Long> values) {
            addCriterion("user_id in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotIn(List<Long> values) {
            addCriterion("user_id not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdBetween(Long value1, Long value2) {
            addCriterion("user_id between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotBetween(Long value1, Long value2) {
            addCriterion("user_id not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinIsNull() {
            addCriterion("total_gold_coin is null");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinIsNotNull() {
            addCriterion("total_gold_coin is not null");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinEqualTo(Integer value) {
            addCriterion("total_gold_coin =", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinNotEqualTo(Integer value) {
            addCriterion("total_gold_coin <>", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinGreaterThan(Integer value) {
            addCriterion("total_gold_coin >", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_gold_coin >=", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinLessThan(Integer value) {
            addCriterion("total_gold_coin <", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinLessThanOrEqualTo(Integer value) {
            addCriterion("total_gold_coin <=", value, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinIn(List<Integer> values) {
            addCriterion("total_gold_coin in", values, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinNotIn(List<Integer> values) {
            addCriterion("total_gold_coin not in", values, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinBetween(Integer value1, Integer value2) {
            addCriterion("total_gold_coin between", value1, value2, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalGoldCoinNotBetween(Integer value1, Integer value2) {
            addCriterion("total_gold_coin not between", value1, value2, "totalGoldCoin");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIsNull() {
            addCriterion("total_practice_time is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIsNotNull() {
            addCriterion("total_practice_time is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeEqualTo(Integer value) {
            addCriterion("total_practice_time =", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotEqualTo(Integer value) {
            addCriterion("total_practice_time <>", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeGreaterThan(Integer value) {
            addCriterion("total_practice_time >", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_time >=", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeLessThan(Integer value) {
            addCriterion("total_practice_time <", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_time <=", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIn(List<Integer> values) {
            addCriterion("total_practice_time in", values, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotIn(List<Integer> values) {
            addCriterion("total_practice_time not in", values, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_time between", value1, value2, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_time not between", value1, value2, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIsNull() {
            addCriterion("total_practice_score is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIsNotNull() {
            addCriterion("total_practice_score is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreEqualTo(Integer value) {
            addCriterion("total_practice_score =", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotEqualTo(Integer value) {
            addCriterion("total_practice_score <>", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreGreaterThan(Integer value) {
            addCriterion("total_practice_score >", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_score >=", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreLessThan(Integer value) {
            addCriterion("total_practice_score <", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_score <=", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIn(List<Integer> values) {
            addCriterion("total_practice_score in", values, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotIn(List<Integer> values) {
            addCriterion("total_practice_score not in", values, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_score between", value1, value2, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_score not between", value1, value2, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIsNull() {
            addCriterion("total_practice_count is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIsNotNull() {
            addCriterion("total_practice_count is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountEqualTo(Integer value) {
            addCriterion("total_practice_count =", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotEqualTo(Integer value) {
            addCriterion("total_practice_count <>", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountGreaterThan(Integer value) {
            addCriterion("total_practice_count >", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_count >=", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountLessThan(Integer value) {
            addCriterion("total_practice_count <", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_count <=", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIn(List<Integer> values) {
            addCriterion("total_practice_count in", values, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotIn(List<Integer> values) {
            addCriterion("total_practice_count not in", values, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_count between", value1, value2, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_count not between", value1, value2, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountIsNull() {
            addCriterion("unlock_practice_song_count is null");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountIsNotNull() {
            addCriterion("unlock_practice_song_count is not null");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountEqualTo(Integer value) {
            addCriterion("unlock_practice_song_count =", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountNotEqualTo(Integer value) {
            addCriterion("unlock_practice_song_count <>", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountGreaterThan(Integer value) {
            addCriterion("unlock_practice_song_count >", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("unlock_practice_song_count >=", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountLessThan(Integer value) {
            addCriterion("unlock_practice_song_count <", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountLessThanOrEqualTo(Integer value) {
            addCriterion("unlock_practice_song_count <=", value, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountIn(List<Integer> values) {
            addCriterion("unlock_practice_song_count in", values, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountNotIn(List<Integer> values) {
            addCriterion("unlock_practice_song_count not in", values, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountBetween(Integer value1, Integer value2) {
            addCriterion("unlock_practice_song_count between", value1, value2, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andUnlockPracticeSongCountNotBetween(Integer value1, Integer value2) {
            addCriterion("unlock_practice_song_count not between", value1, value2, "unlockPracticeSongCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountIsNull() {
            addCriterion("match_count is null");
            return (Criteria) this;
        }

        public Criteria andMatchCountIsNotNull() {
            addCriterion("match_count is not null");
            return (Criteria) this;
        }

        public Criteria andMatchCountEqualTo(Integer value) {
            addCriterion("match_count =", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountNotEqualTo(Integer value) {
            addCriterion("match_count <>", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountGreaterThan(Integer value) {
            addCriterion("match_count >", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("match_count >=", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountLessThan(Integer value) {
            addCriterion("match_count <", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountLessThanOrEqualTo(Integer value) {
            addCriterion("match_count <=", value, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountIn(List<Integer> values) {
            addCriterion("match_count in", values, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountNotIn(List<Integer> values) {
            addCriterion("match_count not in", values, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountBetween(Integer value1, Integer value2) {
            addCriterion("match_count between", value1, value2, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchCountNotBetween(Integer value1, Integer value2) {
            addCriterion("match_count not between", value1, value2, "matchCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountIsNull() {
            addCriterion("match_win_count is null");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountIsNotNull() {
            addCriterion("match_win_count is not null");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountEqualTo(Integer value) {
            addCriterion("match_win_count =", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountNotEqualTo(Integer value) {
            addCriterion("match_win_count <>", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountGreaterThan(Integer value) {
            addCriterion("match_win_count >", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("match_win_count >=", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountLessThan(Integer value) {
            addCriterion("match_win_count <", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountLessThanOrEqualTo(Integer value) {
            addCriterion("match_win_count <=", value, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountIn(List<Integer> values) {
            addCriterion("match_win_count in", values, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountNotIn(List<Integer> values) {
            addCriterion("match_win_count not in", values, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountBetween(Integer value1, Integer value2) {
            addCriterion("match_win_count between", value1, value2, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andMatchWinCountNotBetween(Integer value1, Integer value2) {
            addCriterion("match_win_count not between", value1, value2, "matchWinCount");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeIsNull() {
            addCriterion("last_practice_time is null");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeIsNotNull() {
            addCriterion("last_practice_time is not null");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeEqualTo(Date value) {
            addCriterion("last_practice_time =", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeNotEqualTo(Date value) {
            addCriterion("last_practice_time <>", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeGreaterThan(Date value) {
            addCriterion("last_practice_time >", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("last_practice_time >=", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeLessThan(Date value) {
            addCriterion("last_practice_time <", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeLessThanOrEqualTo(Date value) {
            addCriterion("last_practice_time <=", value, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeIn(List<Date> values) {
            addCriterion("last_practice_time in", values, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeNotIn(List<Date> values) {
            addCriterion("last_practice_time not in", values, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeBetween(Date value1, Date value2) {
            addCriterion("last_practice_time between", value1, value2, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andLastPracticeTimeNotBetween(Date value1, Date value2) {
            addCriterion("last_practice_time not between", value1, value2, "lastPracticeTime");
            return (Criteria) this;
        }

        public Criteria andIsDeletedIsNull() {
            addCriterion("is_deleted is null");
            return (Criteria) this;
        }

        public Criteria andIsDeletedIsNotNull() {
            addCriterion("is_deleted is not null");
            return (Criteria) this;
        }

        public Criteria andIsDeletedEqualTo(Byte value) {
            addCriterion("is_deleted =", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedNotEqualTo(Byte value) {
            addCriterion("is_deleted <>", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedGreaterThan(Byte value) {
            addCriterion("is_deleted >", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedGreaterThanOrEqualTo(Byte value) {
            addCriterion("is_deleted >=", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedLessThan(Byte value) {
            addCriterion("is_deleted <", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedLessThanOrEqualTo(Byte value) {
            addCriterion("is_deleted <=", value, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedIn(List<Byte> values) {
            addCriterion("is_deleted in", values, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedNotIn(List<Byte> values) {
            addCriterion("is_deleted not in", values, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedBetween(Byte value1, Byte value2) {
            addCriterion("is_deleted between", value1, value2, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andIsDeletedNotBetween(Byte value1, Byte value2) {
            addCriterion("is_deleted not between", value1, value2, "isDeleted");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Date value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Date value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Date value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Date value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Date> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Date> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Date value1, Date value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("update_time is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("update_time is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(Date value) {
            addCriterion("update_time =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(Date value) {
            addCriterion("update_time <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(Date value) {
            addCriterion("update_time >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("update_time >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(Date value) {
            addCriterion("update_time <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(Date value) {
            addCriterion("update_time <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<Date> values) {
            addCriterion("update_time in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<Date> values) {
            addCriterion("update_time not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(Date value1, Date value2) {
            addCriterion("update_time between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(Date value1, Date value2) {
            addCriterion("update_time not between", value1, value2, "updateTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_summary
     *
     * @mbg.generated do_not_delete_during_merge Wed Aug 24 21:12:33 CST 2016
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_summary
     *
     * @mbg.generated Wed Aug 24 21:12:33 CST 2016
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}