package com.jusbilee.app.mybatis.pojo;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class UserPracticeSummaryCriteria {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    protected List<Criteria> oredCriteria;

    private Integer limit;

    private Integer offset;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public UserPracticeSummaryCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    public void setLimit(Integer limit) {
        this.limit = limit;
    }

    public Integer getLimit() {
        return limit;
    }

    public void setOffset(Integer offset) {
        this.offset = offset;
    }

    public Integer getOffset() {
        return offset;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNull() {
            addCriterion("user_id is null");
            return (Criteria) this;
        }

        public Criteria andUserIdIsNotNull() {
            addCriterion("user_id is not null");
            return (Criteria) this;
        }

        public Criteria andUserIdEqualTo(Long value) {
            addCriterion("user_id =", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotEqualTo(Long value) {
            addCriterion("user_id <>", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThan(Long value) {
            addCriterion("user_id >", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdGreaterThanOrEqualTo(Long value) {
            addCriterion("user_id >=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThan(Long value) {
            addCriterion("user_id <", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdLessThanOrEqualTo(Long value) {
            addCriterion("user_id <=", value, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdIn(List<Long> values) {
            addCriterion("user_id in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotIn(List<Long> values) {
            addCriterion("user_id not in", values, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdBetween(Long value1, Long value2) {
            addCriterion("user_id between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andUserIdNotBetween(Long value1, Long value2) {
            addCriterion("user_id not between", value1, value2, "userId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdIsNull() {
            addCriterion("practice_song_id is null");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdIsNotNull() {
            addCriterion("practice_song_id is not null");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdEqualTo(Integer value) {
            addCriterion("practice_song_id =", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdNotEqualTo(Integer value) {
            addCriterion("practice_song_id <>", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdGreaterThan(Integer value) {
            addCriterion("practice_song_id >", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("practice_song_id >=", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdLessThan(Integer value) {
            addCriterion("practice_song_id <", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdLessThanOrEqualTo(Integer value) {
            addCriterion("practice_song_id <=", value, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdIn(List<Integer> values) {
            addCriterion("practice_song_id in", values, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdNotIn(List<Integer> values) {
            addCriterion("practice_song_id not in", values, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdBetween(Integer value1, Integer value2) {
            addCriterion("practice_song_id between", value1, value2, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andPracticeSongIdNotBetween(Integer value1, Integer value2) {
            addCriterion("practice_song_id not between", value1, value2, "practiceSongId");
            return (Criteria) this;
        }

        public Criteria andStyleIdIsNull() {
            addCriterion("style_id is null");
            return (Criteria) this;
        }

        public Criteria andStyleIdIsNotNull() {
            addCriterion("style_id is not null");
            return (Criteria) this;
        }

        public Criteria andStyleIdEqualTo(Integer value) {
            addCriterion("style_id =", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdNotEqualTo(Integer value) {
            addCriterion("style_id <>", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdGreaterThan(Integer value) {
            addCriterion("style_id >", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("style_id >=", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdLessThan(Integer value) {
            addCriterion("style_id <", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdLessThanOrEqualTo(Integer value) {
            addCriterion("style_id <=", value, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdIn(List<Integer> values) {
            addCriterion("style_id in", values, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdNotIn(List<Integer> values) {
            addCriterion("style_id not in", values, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdBetween(Integer value1, Integer value2) {
            addCriterion("style_id between", value1, value2, "styleId");
            return (Criteria) this;
        }

        public Criteria andStyleIdNotBetween(Integer value1, Integer value2) {
            addCriterion("style_id not between", value1, value2, "styleId");
            return (Criteria) this;
        }

        public Criteria andSongIdIsNull() {
            addCriterion("song_id is null");
            return (Criteria) this;
        }

        public Criteria andSongIdIsNotNull() {
            addCriterion("song_id is not null");
            return (Criteria) this;
        }

        public Criteria andSongIdEqualTo(Integer value) {
            addCriterion("song_id =", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotEqualTo(Integer value) {
            addCriterion("song_id <>", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdGreaterThan(Integer value) {
            addCriterion("song_id >", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("song_id >=", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdLessThan(Integer value) {
            addCriterion("song_id <", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdLessThanOrEqualTo(Integer value) {
            addCriterion("song_id <=", value, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdIn(List<Integer> values) {
            addCriterion("song_id in", values, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotIn(List<Integer> values) {
            addCriterion("song_id not in", values, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdBetween(Integer value1, Integer value2) {
            addCriterion("song_id between", value1, value2, "songId");
            return (Criteria) this;
        }

        public Criteria andSongIdNotBetween(Integer value1, Integer value2) {
            addCriterion("song_id not between", value1, value2, "songId");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIsNull() {
            addCriterion("total_practice_time is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIsNotNull() {
            addCriterion("total_practice_time is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeEqualTo(Integer value) {
            addCriterion("total_practice_time =", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotEqualTo(Integer value) {
            addCriterion("total_practice_time <>", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeGreaterThan(Integer value) {
            addCriterion("total_practice_time >", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_time >=", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeLessThan(Integer value) {
            addCriterion("total_practice_time <", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_time <=", value, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeIn(List<Integer> values) {
            addCriterion("total_practice_time in", values, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotIn(List<Integer> values) {
            addCriterion("total_practice_time not in", values, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_time between", value1, value2, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_time not between", value1, value2, "totalPracticeTime");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIsNull() {
            addCriterion("total_practice_count is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIsNotNull() {
            addCriterion("total_practice_count is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountEqualTo(Integer value) {
            addCriterion("total_practice_count =", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotEqualTo(Integer value) {
            addCriterion("total_practice_count <>", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountGreaterThan(Integer value) {
            addCriterion("total_practice_count >", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_count >=", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountLessThan(Integer value) {
            addCriterion("total_practice_count <", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_count <=", value, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountIn(List<Integer> values) {
            addCriterion("total_practice_count in", values, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotIn(List<Integer> values) {
            addCriterion("total_practice_count not in", values, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_count between", value1, value2, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeCountNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_count not between", value1, value2, "totalPracticeCount");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIsNull() {
            addCriterion("total_practice_score is null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIsNotNull() {
            addCriterion("total_practice_score is not null");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreEqualTo(Integer value) {
            addCriterion("total_practice_score =", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotEqualTo(Integer value) {
            addCriterion("total_practice_score <>", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreGreaterThan(Integer value) {
            addCriterion("total_practice_score >", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreGreaterThanOrEqualTo(Integer value) {
            addCriterion("total_practice_score >=", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreLessThan(Integer value) {
            addCriterion("total_practice_score <", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreLessThanOrEqualTo(Integer value) {
            addCriterion("total_practice_score <=", value, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreIn(List<Integer> values) {
            addCriterion("total_practice_score in", values, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotIn(List<Integer> values) {
            addCriterion("total_practice_score not in", values, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_score between", value1, value2, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andTotalPracticeScoreNotBetween(Integer value1, Integer value2) {
            addCriterion("total_practice_score not between", value1, value2, "totalPracticeScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreIsNull() {
            addCriterion("best_score is null");
            return (Criteria) this;
        }

        public Criteria andBestScoreIsNotNull() {
            addCriterion("best_score is not null");
            return (Criteria) this;
        }

        public Criteria andBestScoreEqualTo(Integer value) {
            addCriterion("best_score =", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreNotEqualTo(Integer value) {
            addCriterion("best_score <>", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreGreaterThan(Integer value) {
            addCriterion("best_score >", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreGreaterThanOrEqualTo(Integer value) {
            addCriterion("best_score >=", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreLessThan(Integer value) {
            addCriterion("best_score <", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreLessThanOrEqualTo(Integer value) {
            addCriterion("best_score <=", value, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreIn(List<Integer> values) {
            addCriterion("best_score in", values, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreNotIn(List<Integer> values) {
            addCriterion("best_score not in", values, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreBetween(Integer value1, Integer value2) {
            addCriterion("best_score between", value1, value2, "bestScore");
            return (Criteria) this;
        }

        public Criteria andBestScoreNotBetween(Integer value1, Integer value2) {
            addCriterion("best_score not between", value1, value2, "bestScore");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeIsNull() {
            addCriterion("full_score_best_time is null");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeIsNotNull() {
            addCriterion("full_score_best_time is not null");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeEqualTo(Integer value) {
            addCriterion("full_score_best_time =", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeNotEqualTo(Integer value) {
            addCriterion("full_score_best_time <>", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeGreaterThan(Integer value) {
            addCriterion("full_score_best_time >", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeGreaterThanOrEqualTo(Integer value) {
            addCriterion("full_score_best_time >=", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeLessThan(Integer value) {
            addCriterion("full_score_best_time <", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeLessThanOrEqualTo(Integer value) {
            addCriterion("full_score_best_time <=", value, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeIn(List<Integer> values) {
            addCriterion("full_score_best_time in", values, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeNotIn(List<Integer> values) {
            addCriterion("full_score_best_time not in", values, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeBetween(Integer value1, Integer value2) {
            addCriterion("full_score_best_time between", value1, value2, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andFullScoreBestTimeNotBetween(Integer value1, Integer value2) {
            addCriterion("full_score_best_time not between", value1, value2, "fullScoreBestTime");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeIsNull() {
            addCriterion("unlock_type is null");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeIsNotNull() {
            addCriterion("unlock_type is not null");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeEqualTo(Integer value) {
            addCriterion("unlock_type =", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeNotEqualTo(Integer value) {
            addCriterion("unlock_type <>", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeGreaterThan(Integer value) {
            addCriterion("unlock_type >", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("unlock_type >=", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeLessThan(Integer value) {
            addCriterion("unlock_type <", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeLessThanOrEqualTo(Integer value) {
            addCriterion("unlock_type <=", value, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeIn(List<Integer> values) {
            addCriterion("unlock_type in", values, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeNotIn(List<Integer> values) {
            addCriterion("unlock_type not in", values, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeBetween(Integer value1, Integer value2) {
            addCriterion("unlock_type between", value1, value2, "unlockType");
            return (Criteria) this;
        }

        public Criteria andUnlockTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("unlock_type not between", value1, value2, "unlockType");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNull() {
            addCriterion("create_time is null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIsNotNull() {
            addCriterion("create_time is not null");
            return (Criteria) this;
        }

        public Criteria andCreateTimeEqualTo(Date value) {
            addCriterion("create_time =", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotEqualTo(Date value) {
            addCriterion("create_time <>", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThan(Date value) {
            addCriterion("create_time >", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("create_time >=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThan(Date value) {
            addCriterion("create_time <", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeLessThanOrEqualTo(Date value) {
            addCriterion("create_time <=", value, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeIn(List<Date> values) {
            addCriterion("create_time in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotIn(List<Date> values) {
            addCriterion("create_time not in", values, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeBetween(Date value1, Date value2) {
            addCriterion("create_time between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andCreateTimeNotBetween(Date value1, Date value2) {
            addCriterion("create_time not between", value1, value2, "createTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNull() {
            addCriterion("update_time is null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIsNotNull() {
            addCriterion("update_time is not null");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeEqualTo(Date value) {
            addCriterion("update_time =", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotEqualTo(Date value) {
            addCriterion("update_time <>", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThan(Date value) {
            addCriterion("update_time >", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("update_time >=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThan(Date value) {
            addCriterion("update_time <", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeLessThanOrEqualTo(Date value) {
            addCriterion("update_time <=", value, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeIn(List<Date> values) {
            addCriterion("update_time in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotIn(List<Date> values) {
            addCriterion("update_time not in", values, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeBetween(Date value1, Date value2) {
            addCriterion("update_time between", value1, value2, "updateTime");
            return (Criteria) this;
        }

        public Criteria andUpdateTimeNotBetween(Date value1, Date value2) {
            addCriterion("update_time not between", value1, value2, "updateTime");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated do_not_delete_during_merge Wed Sep 14 07:56:40 CST 2016
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table t_user_practice_summary
     *
     * @mbg.generated Wed Sep 14 07:56:40 CST 2016
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}