package com.jusbilee.app.mybatis.dao;

import com.jusbilee.app.mybatis.pojo.UserPracticeLog;
import com.jusbilee.app.mybatis.pojo.UserPracticeLogCriteria;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface UserPracticeLogMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @SelectProvider(type = UserPracticeLogSqlProvider.class, method = "countByExample")
    long countByExample(UserPracticeLogCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @DeleteProvider(type = UserPracticeLogSqlProvider.class, method = "deleteByExample")
    int deleteByExample(UserPracticeLogCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @Delete({
            "delete from t_user_practice_log",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @Insert({
            "insert into t_user_practice_log (user_id, song_id, ",
            "practice_song_id, style_id, ",
            "practice_time, practice_count, ",
            "practice_score, best_avg_score, ",
            "full_score_best_time, create_time)",
            "values (#{userId,jdbcType=BIGINT}, #{songId,jdbcType=INTEGER}, ",
            "#{practiceSongId,jdbcType=INTEGER}, #{styleId,jdbcType=INTEGER}, ",
            "#{practiceTime,jdbcType=INTEGER}, #{practiceCount,jdbcType=INTEGER}, ",
            "#{practiceScore,jdbcType=INTEGER}, #{bestAvgScore,jdbcType=INTEGER}, ",
            "#{fullScoreBestTime,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})"
    })
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Long.class)
    int insert(UserPracticeLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @InsertProvider(type = UserPracticeLogSqlProvider.class, method = "insertSelective")
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Long.class)
    int insertSelective(UserPracticeLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @SelectProvider(type = UserPracticeLogSqlProvider.class, method = "selectByExample")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "song_id", property = "songId", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_song_id", property = "practiceSongId", jdbcType = JdbcType.INTEGER),
            @Result(column = "style_id", property = "styleId", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_time", property = "practiceTime", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_count", property = "practiceCount", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_score", property = "practiceScore", jdbcType = JdbcType.INTEGER),
            @Result(column = "best_avg_score", property = "bestAvgScore", jdbcType = JdbcType.INTEGER),
            @Result(column = "full_score_best_time", property = "fullScoreBestTime", jdbcType = JdbcType.INTEGER),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    List<UserPracticeLog> selectByExample(UserPracticeLogCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @Select({
            "select",
            "id, user_id, song_id, practice_song_id, style_id, practice_time, practice_count, ",
            "practice_score, best_avg_score, full_score_best_time, create_time",
            "from t_user_practice_log",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "user_id", property = "userId", jdbcType = JdbcType.BIGINT),
            @Result(column = "song_id", property = "songId", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_song_id", property = "practiceSongId", jdbcType = JdbcType.INTEGER),
            @Result(column = "style_id", property = "styleId", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_time", property = "practiceTime", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_count", property = "practiceCount", jdbcType = JdbcType.INTEGER),
            @Result(column = "practice_score", property = "practiceScore", jdbcType = JdbcType.INTEGER),
            @Result(column = "best_avg_score", property = "bestAvgScore", jdbcType = JdbcType.INTEGER),
            @Result(column = "full_score_best_time", property = "fullScoreBestTime", jdbcType = JdbcType.INTEGER),
            @Result(column = "create_time", property = "createTime", jdbcType = JdbcType.TIMESTAMP)
    })
    UserPracticeLog selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @UpdateProvider(type = UserPracticeLogSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") UserPracticeLog record, @Param("example") UserPracticeLogCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @UpdateProvider(type = UserPracticeLogSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") UserPracticeLog record, @Param("example") UserPracticeLogCriteria example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @UpdateProvider(type = UserPracticeLogSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(UserPracticeLog record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_user_practice_log
     *
     * @mbg.generated Sat Sep 10 23:20:28 CST 2016
     */
    @Update({
            "update t_user_practice_log",
            "set user_id = #{userId,jdbcType=BIGINT},",
            "song_id = #{songId,jdbcType=INTEGER},",
            "practice_song_id = #{practiceSongId,jdbcType=INTEGER},",
            "style_id = #{styleId,jdbcType=INTEGER},",
            "practice_time = #{practiceTime,jdbcType=INTEGER},",
            "practice_count = #{practiceCount,jdbcType=INTEGER},",
            "practice_score = #{practiceScore,jdbcType=INTEGER},",
            "best_avg_score = #{bestAvgScore,jdbcType=INTEGER},",
            "full_score_best_time = #{fullScoreBestTime,jdbcType=INTEGER},",
            "create_time = #{createTime,jdbcType=TIMESTAMP}",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(UserPracticeLog record);
}